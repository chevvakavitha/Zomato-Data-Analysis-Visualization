import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Select relevant features
X = df[['cost_for_two', 'Votes', 'Price_Range']].dropna()
y = df['Rating']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

# Show predicted vs actual ratings
comparison_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(comparison_df.head())


#Word Cloud of Popular Cuisines
import pandas as pd
from wordcloud import WordCloud
import matplotlib.pyplot as plt


# Combine all cuisines into a single string
cuisines_text = ' '.join(df['Cuisines'].dropna().astype(str).values)

# Generate a word cloud
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(cuisines_text)

# Display the word cloud
plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Most Popular Cuisines')
plt.show()



#Heatmap of Restaurant Density by City and Price Range
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


# Create a pivot table for city and price range
heatmap_data = df.pivot_table(index='City', columns='Price_Range', values='Restaurant
ID', aggfunc='count')

# Plot the heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(heatmap_data, annot=True, fmt='g', cmap='YlGnBu')
plt.title('Restaurant Density by City and Price Range')
plt.xlabel('Price Range')
plt.ylabel('City')
plt.show()


#Correlation Analysis Between Attributes
corr_matrix = df[['cost_for_two', 'Price_Range', 'Rating', 'Votes']].corr()

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Matrix of Restaurant Attributes')
plt.show()


#Optimized Data Aggregation Using Groupby and Apply

# Group by city and aggregate
city_stats = df.groupby('City').apply(
    lambda x: pd.Series({
        'Average_Rating': x['Rating'].mean(),
        'Total_Votes': x['Votes'].sum()
    })
).reset_index()

# Display the results
print(city_stats.sort_values(by='Average_Rating', ascending=False).head(10))
